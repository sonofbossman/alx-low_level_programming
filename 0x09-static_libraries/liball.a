!<arch>
0-isupper.c/    0           0     0     644     212       `
#include "main.h"
/**
 * _isupper - checks for uppercase letters
 * @c: text variable
 * Return: 1 if true and 0 otherwise
 */
int _isupper(int c)
{
	if (c >= 'A' && c <= 'Z')
		return (1);
	else
		return (0);
}
0-memset.c/     0           0     0     644     310       `
#include "main.h"
/**
 * _memset - fill a block of memory with a constant byte
 * @s: starting address of memory to be filled
 * @b: constant byte
 * @n: number of bytes
 * Return: s
 */
char *_memset(char *s, char b, unsigned int n)
{
	int i = 0;

	for (; n > 0; i++)
	{
		s[i] = b;
		n--;
	}
	return (s);
}

0-strcat.c/     0           0     0     644     345       `
#include "main.h"
/**
 * *_strcat - function that concatenates two strings
 * @dest: first string
 * @src: second string
 * Return: dest
 */
char *_strcat(char *dest, char *src)
{
	int i, j;

	i = 0;
	j = 0;
	while (dest[i] != '\0')
	{
		i++;
	}
	while (src[j] != '\0')
	{
		dest[i] = src[j];
		i++;
		j++;
	}
	dest[i] = '\0';
	return (dest);
}

100-atoi.c/     0           0     0     644     580       `
#include "main.h"
/**
 * _atoi - function that convert a string to an integer
 * @s: string to be converted into integer
 * Return: counts
 */
int _atoi(char *s)
{
	unsigned int c = 0, x = 0, i = 0;
	unsigned int p = 1, m = 1, j;

	while (*(s + c) != '\0')
	{
		if (x > 0 && (*(s + c) < '0' || *(s + c) > '9'))
		{
			break;
		}
		if (*(s + c) == '-')
		{
			p *= -1;
		}
		if ((*(s + c) >= '0') && (*(s  + c) <= '9'))
		{
			if (x > 0)
			{
				m *= 10;
			}
			x++;
		}
		c++;
	}
	for (j = c - x; j < c; j++)
	{
		i = i + ((*(s + j) - 48) * m);
		m /= 10;
	}
	return (i * p);
}
1-isdigit.c/    0           0     0     644     202       `
#include "main.h"
/**
 * _isdigit - function checks for a digit (0 through 9)
 * @c: integer to be checked
 * Return: 1 if true 0 if otherwise
 */
int _isdigit(int c)
{
return (c >= '0' && c <= '9');
}
1-memcpy.c/     0           0     0     644     343       `
#include "main.h"
/**
 * _memcpy - a function that copies memory area
 * @dest: memory area
 * @src: memory area
 * *@n: number of bytes
 *
 * Return: copied memory with n byted changed
 */

char *_memcpy(char *dest, char *src, unsigned int n)
{
	int j = 0;
	int i = n;

	for (; j < i; j++)
	{
		dest[j] = src[j];
		n--;
	}
	return (dest);
}


1-strncat.c/    0           0     0     644     386       `
#include "main.h"
/**
 * *_strncat - function that concatenates two strings
 * @dest: first string
 * @src: second string
 * @n: number of bytes
 * Return: dest
 */
char *_strncat(char *dest, char *src, int n)
{
	int i, j;

	i = 0;
	j = 0;
	while (dest[i] != '\0')
	{
		i++;
	}
	while (j < n && src[j] != '\0')
	{
		dest[i] = src[j];
		i++;
		j++;
	}
	dest[i] = '\0';
	return (dest);
}
2-strchr.c/     0           0     0     644     283       `
#include "main.h"
/**
 * _strchr - function that locates a character in a string
 * @s: input string
 * @c: character
 * Return: Always 0 (Success)
 */
char *_strchr(char *s, char c)
{
	int i = 0;

	for (; s[i] >= '\0'; i++)
	{
		if (s[i] == c)
			return (&s[i]);
	}
	return (0);
}


2-strlen.c/     0           0     0     644     274       `
#include "main.h"
/**
 * _strlen - returns the length of a string
 * @s: string whose length is to be determined
 * Return: the length of the string
 */
int _strlen(char *s)
{
	int str_len;

	str_len = 0;

	while (s[str_len] != '\0')
	{
		str_len++;
	}
	return (str_len);
}
2-strncpy.c/    0           0     0     644     350       `
#include "main.h"
/**
 * *_strncpy - function that copies a string
 * @dest: first string
 * @src: second string
 * @n: number of bytes
 * Return: dest
 */
char *_strncpy(char *dest, char *src, int n)
{
	int i;

	i = 0;
	while (i < n && src[i] != '\0')
	{
		dest[i] = src[i];
		i++;
	}
	while (i < n)
	{
		dest[i] = '\0';
		i++;
	}
	return (dest);
}
3-islower.c/    0           0     0     644     221       `
#include "main.h"
/**
 * _islower - checks for lowercase character
 * @c: character to be checked
 * Return: 1 if lowercase, 0 if otherwise
 */
int _islower(int c)
{
	if (c >= 97 && c <= 122)
		return (1);
	return (0);
}

3-puts.c/       0           0     0     644     225       `
#include "main.h"
/**
 * _puts - prints a string, followed by a new line, to stdout
 * @str: string to print
 */
void _puts(char *str)
{
	int i;

	for (i = 0; str[i] != '\0'; i++)
	{
		_putchar(str[i]);
	}
	_putchar('\n');
}

3-strcmp.c/     0           0     0     644     318       `
#include "main.h"
/**
 * _strcmp - function that compares two strings
 * @s1: first string
 * @s2: second string
 * Return: s1[i] - s2[i]
 */
int _strcmp(char *s1, char *s2)
{
	int i;

	i = 0;
	while (s1[i] != '\0' && s2[i] != '\0')
	{
		if (s1[i] != s2[i])
		{
			return (s1[i] - s2[i]);
		}
		i++;
	}
	return (0);
}
3-strspn.c/     0           0     0     644     402       `
#include "main.h"
/**
 * _strspn - function that gets the length of a prefix substring
 * @s: input
 * @accept: input
 * Return: Always 0
 */
unsigned int _strspn(char *s, char *accept)
{
	unsigned int n = 0;
	int r;

	while (*s)
	{
		for (r = 0; accept[r]; r++)
		{
			if (*s == accept[r])
			{
				n++;
				break;
			}
			else if (accept[r + 1] == '\0')
				return (n);
		}
		s++;
	}
	return (n);
}

4-isalpha.c/    0           0     0     644     250       `
#include "main.h"
/**
 * _isalpha - checks for alphabetic character
 * @c: character to be checked
 * Return: 1 if it is a letter, 0 otherwise
 */
int _isalpha(int c)
{
	if ((c >= 65 && c <= 90) || (c >= 97 && c <= 122))
		return (1);
	return (0);
}
4-strpbrk.c/    0           0     0     644     319       `
#include "main.h"
/**
 * _strpbrk - function that searches a string
 * for any of a set of bytes
 * @s: input
 * @accept: input
 * Return: Always 0
 */
char *_strpbrk(char *s, char *accept)
{
	int p;

	while (*s)
	{
		for (p = 0; accept[p]; p++)
		{
		if (*s == accept[p])
		return (s);
		}
	s++;
	}
	return ('\0');
}


5-strstr.c/     0           0     0     644     389       `
#include "main.h"
/**
 * _strstr - function that locates a substring
 * @haystack: input
 * @needle: input
 * Return: Always 0 (Success)
 */
char *_strstr(char *haystack, char *needle)
{
	for (; *haystack != '\0'; haystack++)
	{
		char *x = haystack;
		char *y = needle;

		while (*x == *y && *y != '\0')
		{
			x++;
			y++;
		}

		if (*y == '\0')
			return (haystack);
	}
	return (0);
}


6-abs.c/        0           0     0     644     236       `
#include "main.h"
/**
 * _abs - computes the absolute value of an integer
 * @c: integer to get its absolute value
 * Return: c
 */
int _abs(int c)
{
	int abs_val;

	if (c < 0)
	{
	abs_val = c * -1;
	return (abs_val);
	}
	return (c);
}
9-strcpy.c/     0           0     0     644     394       `
#include "main.h"
/**
 * *_strcpy - Write a function that copies the string pointed to by src,
 * including the terminating null byte (\0), to the buffer pointed to by dest
 * @dest: pointer one
 * @src: pointer two
 * Return: the pointer to dest
 */
char *_strcpy(char *dest, char *src)
{
	int i;

	for (i = 0; src[i] != '\0'; i++)
	{
		dest[i] = src[i];
	}
	dest[i] = '\0';
	return (dest);
}
main.c/         0           0     0     644     148       `
#include "main.h"

int main(void)
{
    _puts("\"At the end of the day, my goal was to be the best hacker\"\n\t- Kevin Mitnick");
    return (0);
}
_putchar.c/     0           0     0     644     247       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

